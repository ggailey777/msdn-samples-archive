<#@ template debug="false" hostSpecific="true" #>
<#@ output extension=".cs" #>

<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly name="Microsoft.Data.Edm" #>
<#@ Assembly name="Microsoft.Data.OData" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml"#>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>   
<#@ import namespace="Microsoft.Data.Edm.Csdl" #> 
<#@ import namespace="Microsoft.Data.Edm" #> 
<#@ import namespace="Microsoft.Data.Edm.Annotations" #> 
<#@ import namespace="System.Data.Services.Common"#>
<#@ import namespace="System.Text"#>
<#   

 
if (TransformContext == null)
{
	TransformContext = new CodeGenerationContext
	{
		// Replace this with the NS of your client (not the same one as from Add Service Reference).
		Namespace="ODataWinPhoneQuickstart.DataServiceContext.Netflix",
		// Replace this path with with path to the edmx file generated for the reference.
		MetadataFilepath=@"C:\Users\XXXX\Documents\Visual Studio 2010\Projects\ODataWinPhoneLocalStorage\ODataWinPhoneLocalStorage\Service References\Netflix\service.edmx"
	};
	TransformContext.LoadEdmModelFromFile();
}

BeginWriteNamespace();

IEdmEntityContainer container = TransformContext.EdmModel.EntityContainers.FirstOrDefault<IEdmEntityContainer>();

var entitySetQuery = from item in container.Elements
where item.ContainerElementKind == EdmContainerElementKind.EntitySet
select item as IEdmEntitySet;

// Write DataServiceContext 
WriteTypeDeclaration(container);
BeginWriteType(container);
WriteContextConstructor(container);
WriteContextTypeResolver(container);
WriteContextAbstractMethods();

// Write DataServiceContext entity sets
foreach (IEdmEntitySet entitySet in entitySetQuery)
{
	WriteContextEntitySet(entitySet);
	WriteContextAddToEntitySetMethod(entitySet);
}
//// Creating service operation methods are not supported for async clients.
//WriteServiceOperations(container);
EndWriteType(container);

// Write LINQ-to-SQL DataContext
WriteLinqDataContext(container);

// Write local DB tables for entity sets
foreach (IEdmEntitySet entitySet in entitySetQuery)
{
	WriteDbTable(entitySet);
}
EndWriteType(container);

// Write Entity types
Dictionary<string,IEdmEntityType> processedEntityTypes= new Dictionary<string,IEdmEntityType>();
foreach (IEdmEntitySet entitySet in entitySetQuery)
 {
	WriteEntitySetAttribute(entitySet);
	WriteDataContractAttribute();
	WriteLinqTableAttribute(entitySet);
	WriteEntity(entitySet.ElementType);
	processedEntityTypes.Add(entitySet.ElementType.Name,entitySet.ElementType);
 }	
// Write complex types
WriteComplexTypes();
WriteRefrencedEntities(processedEntityTypes);

EndWriteNamespace();

#>     
<#+  
	void BeginWriteNamespace()
	{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=TransformContext.Namespace #>	
{
	<#+
	}
	void EndWriteNamespace()
	{
			#>
}
	<#+
	}
void WriteTypeDeclaration(IEdmEntityContainer container )
	{
#>
public partial class <#=container.Name #>: global::System.Data.Services.Client.DataServiceContext
<#+
	}


	void WriteContextConstructor(IEdmEntityContainer container)
	{
	// CTP BUG: need to pass DataServicePRotocol version to constructor, Issue: edmlib does not read it in OCT CTP, worst case will have to xml parse to get it.
	//global::System.Data.Services.Common.DataServiceProtocolVersion.V3
#>
	public <#=container.Name #>(global::System.Uri serviceRoot) : 
                base(serviceRoot<#=WriteContextConstructorDataServiceVersionParameterValue()#>)
    	{
        	this.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
        	this.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
        	this.OnContextCreated();
    	}
		
<#+
	}
	string WriteContextConstructorDataServiceVersionParameterValue()
	{
		string returnString= string.Empty;
		if (!string.IsNullOrEmpty(TransformContext.MaxProtocolVersion))
		{
			returnString=string.Format(", {0}",TransformContext.MaxProtocolVersion);
		}
		return returnString;
	}
	void WriteContextTypeResolver(IEdmEntityContainer container)
	{
		string schemaNamespace = TransformContext.EdmModel.SchemaElements.First<IEdmSchemaElement>().Namespace;
#>
		protected global::System.Type ResolveTypeFromName(string typeName)
        {
            if (typeName.StartsWith("<#=schemaNamespace#>", global::System.StringComparison.Ordinal))
            {
                return this.GetType().Assembly.GetType(string.Concat("<#=TransformContext.Namespace#>", typeName.Substring(<#=schemaNamespace.Length#>)), false);
            }
            return null;
        }

        protected string ResolveNameFromType(global::System.Type clientType)
        {
            if (clientType.Namespace.Equals("<#=TransformContext.Namespace #>", global::System.StringComparison.Ordinal))
            {
                return string.Concat("<#=TransformContext.EdmModel.SchemaElements.First<IEdmSchemaElement>().Namespace#>.", clientType.Name);
            }
            return null;
        }
		
<#+
	}	
	void WriteContextAbstractMethods()
	{
	#>
	    partial void OnContextCreated();
		
<#+
	}	
	void WriteContextEntitySet(IEdmEntitySet entitySet)
	{
		
#>
		public global::System.Data.Services.Client.DataServiceQuery< <#=entitySet.ElementType.Name#>> <#=entitySet.Name#>
        {
            get
            {
                if ((this._<#=entitySet.Name#> == null))
                {
                    this._<#=entitySet.Name#> = base.CreateQuery< <#=entitySet.ElementType.Name#> >("<#=entitySet.Name#>");
                }
                return this._<#=entitySet.Name#>;
            }
        }
		private global::System.Data.Services.Client.DataServiceQuery< <#=entitySet.ElementType.Name#> > _<#=entitySet.Name#>;		
<#+
	}
	void WriteContextAddToEntitySetMethod(IEdmEntitySet entitySet)
	{
#>
		public void AddTo<#=entitySet.Name#>(<#=entitySet.ElementType.Name#> <#=LowerCaseFirstCharecter(entitySet.ElementType.Name)#>)
        {
            base.AddObject("<#=entitySet.Name#>", <#=LowerCaseFirstCharecter(entitySet.ElementType.Name)#>);
        }
		
<#+
	}	
	
	void WriteDataServiceKeyAttribute(IEdmEntityType entity)
	{
		int keyCount = entity.Key().Count();
		string keys=string.Empty;
		foreach(IEdmStructuralProperty p in  entity.Key())
        {		
			keys= string.Concat(keys,string.Format("\"{0}\"",p.Name));
        	--keyCount;
				if (keyCount!=0)
				{
					keys= string.Concat(keys,", ");
				}
			
        }
#>	[global::System.Data.Services.Common.DataServiceKeyAttribute(<#=keys#>)]
<#+
	}
	void WriteEntitySetAttribute(IEdmEntitySet entitySet)
	{		
#>	[global::System.Data.Services.Common.EntitySetAttribute("<#=entitySet.Name #>")]	
<#+
	}
    void WriteDataContractAttribute()
	{
#>	[global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]	
<#+
	}
	void WriteLinqTableAttribute(IEdmEntitySet entitySet)
	{		
#>	[global::System.Data.Linq.Mapping.TableAttribute]
<#+
	}
	void WriteEntityMleAttribute(IEdmEntityType entityType)
	{
		foreach (IEdmAnnotation annotation in entityType.ImmediateAnnotations)
        {
            if (annotation.LocalName()=="HasStream")
			{
            	object obj=annotation.GetAnnotation(annotation.Namespace(), annotation.LocalName());
            	IEdmImmediateValueAnnotation e = annotation as IEdmImmediateValueAnnotation;				
#>	[global::System.Data.Services.Common.HasStreamAttribute()]	
<#+
		
	}
	
		}
	
}

void WriteLinqDataContext(IEdmEntityContainer container)
	{
	#>
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="<#= container.Name #>")]
	public partial class <#= container.Name #>LocalDB  : global::System.Data.Linq.DataContext
	{
		// Define a default connection string, in case one isn't supplied.
		public static string defaultDbString = "Data Source=isostore:/<#= container.Name #>.sdf";

		// Pass a user-supplied connection string to the base class.
		public <#= container.Name #>LocalDB(string connectionString)
			: base(connectionString)
		{ }

		// Pass the default connection string to the base class.
		public <#= container.Name #>LocalDB()
			: base(defaultDbString)
		{ }
<#+
	
	}	

	void WriteDbTable(IEdmEntitySet entitySet)
	{
		
#>
		public global::System.Data.Linq.Table<<#= entitySet.ElementType.Name #>> <#= entitySet.Name #>;		
<#+
	}


void WriteEntity(IEdmEntityType entityType)
{
	WriteEntityPropertyMappings(entityType);
	WriteEntityMleAttribute(entityType);
	WriteDataServiceKeyAttribute(entityType);
	WriteTypeDeclaration(entityType);
	BeginWriteType(entityType);	
	WritePublicConstructor(entityType);
	WriteTypeStaticCreateMethod(entityType);	
	
	WriteTypeProperties(entityType);	
	
	
	EndWriteType(entityType);	
}
	void BeginWriteType(IEdmEntityContainer container)
	{
		BeginWriteType();	
	}
	void BeginWriteType(IEdmComplexType complexType)
	{
		BeginWriteType();
	}
	void BeginWriteType(IEdmEntityType entity)
	{
		BeginWriteType();
	}
	void BeginWriteType()
	{
#>
	{
<#+		
	}
	void EndWriteType(IEdmEntityContainer container)
	{
		EndWriteType();	
	}
	void EndWriteType(IEdmComplexType complexType)
	{
		//inherintence of complex types is not supported
		WriteINotifyPropertyChangedImplementation();
		EndWriteType();
	}
	void EndWriteType(IEdmEntityType entity)
	{
		if (entity.BaseType==null)
		{
			WriteINotifyPropertyChangedImplementation();
		}
		EndWriteType();
	}
	void EndWriteType()
	{
#>
	}
	
<#+		
	}	
void WriteTypeDeclaration(IEdmEntityType entity )
	{
		
	if (entity.BaseType==null)
	{
		if (entity.IsAbstract)
		{
#>
	public abstract partial class <#=entity.Name #>: global::System.ComponentModel.INotifyPropertyChanged
<#+		}
		else
		{
#>
	public partial class <#=entity.Name #>: global::System.ComponentModel.INotifyPropertyChanged
<#+
		}
	}
	else
	{
		if (entity.IsAbstract)
		{
#>
	public abstract partial class <#=entity.Name #>:  <#=((IEdmEntityType)entity.BaseType).Name#>
<#+
		}
		else
		{
#>
	public partial class <#=entity.Name #>:  <#=((IEdmEntityType)entity.BaseType).Name#>
<#+			
		}
	}
	}
	
	void WritePublicConstructor(IEdmEntityType entity)
	{
	    if (entity.IsAbstract)
		{
			return;	
		}
		var complexProps = from item in entity.DeclaredProperties
                                    where item.Type.Definition.TypeKind== EdmTypeKind.Complex
									select item as IEdmProperty;

		if (complexProps.Count() > 0)
			{#>

			public <#= entity.Name #>()
			{
			    // We need to explicitly instantiate complex properties or L2S fails.
			<#+
			foreach (var property in complexProps)
			{
				#>    this.<#= property.Name #> = new <#= ((IEdmComplexType)property.Type.Definition).Name #>();
			<#+
			}		
		#>}

	<#+}
	}
	

	void WriteTypeStaticCreateMethod(IEdmEntityType entity )
	{
		if (entity.IsAbstract)
		{
			return;	
		}
		IEdmEntityType entityToProcess=entity;
		List<IEdmProperty> nonNullableProps = new List<IEdmProperty>();
		
		do{
			var entityNonNullableProps = from item in entityToProcess.DeclaredProperties
                                    where (item.Type.IsNullable == false && 
												 item.Type.Definition.TypeKind== EdmTypeKind.Primitive ||
												item.Type.Definition.TypeKind== EdmTypeKind.Complex     )||
												((item.Type.Definition.TypeKind== EdmTypeKind.Collection) && (((IEdmCollectionType)item.Type.Definition).IsAtomic))
												
												  
                                    select item as IEdmProperty;
			foreach (IEdmProperty property in entityNonNullableProps)
			{
				nonNullableProps.Add(property);	
			}
			entityToProcess= (IEdmEntityType)entityToProcess.BaseType;
		}while (entityToProcess!=null);
		
		WriteTypeStaticCreateMethod (entity.Name, nonNullableProps);
	}	
	
	void WriteTypeProperties(IEnumerable<IEdmProperty> properties, IEnumerable<string> keyProperties)
	{
		foreach (IEdmProperty property in properties)
		{
			string type;
			bool isKey = false;
			if (property.Type.Definition.TypeKind== EdmTypeKind.Primitive)
			{		
				if (keyProperties != null)
				{
					isKey = keyProperties.Contains(property.Name);
				}		
				WriteTypeProperty(property.Name, (IEdmPrimitiveType) property.Type.Definition,property.Type.IsNullable, isKey);
			}
			
				
			else if (property.Type.Definition.TypeKind== EdmTypeKind.Collection)
			{
				WriteTypeProperty(property.Name, (IEdmCollectionType) property.Type.Definition);

			}
			else if (property.Type.Definition.TypeKind== EdmTypeKind.Complex)
            {
				WriteTypeProperty(property.Name, (IEdmComplexType) property.Type.Definition);
            }
			else if (property.Type.Definition.TypeKind== EdmTypeKind.Entity)
            {
				WriteTypeProperty(property.Name,(IEdmEntityType) property.Type.Definition) ;
            }
			else
			{
				type=property.Type.Definition.TypeKind.ToString();
				#>
	    		public <#=type#> <#=property.Name #>
    			<#+
			}
	
		}		
	}
	void WriteTypeProperties(IEdmComplexType ctxType)
	{
		WriteTypeProperties(ctxType.DeclaredProperties, null);
		
	}
	void WriteTypeProperties(IEdmEntityType entity)
	{
		var keyProperties = from k in entity.DeclaredKey
							select k.Name;
		WriteTypeProperties(entity.DeclaredProperties, keyProperties);
	
	}
	void WriteTypeProperty(string propertyName,IEdmPrimitiveType primitiveType,bool isNullable, bool isKey)
	{

		string type;
		if (isNullable && 
			(primitiveType.PrimitiveKind!=EdmPrimitiveTypeKind.String )&&
			(primitiveType.PrimitiveKind!=EdmPrimitiveTypeKind.Binary))
		{
			type = string.Format("global::System.Nullable<{0}>",TranslateEdmType(primitiveType.PrimitiveKind));
		}
		else
		{			
			type= TranslateEdmType(primitiveType.PrimitiveKind);
		}
		WriteDataMemberAttribute();
		WritePropertyStorageAttribute(propertyName, isNullable, isKey);
 		WriteTypeProperty(propertyName,type,false,false);
		WriteTypePropertyFields(propertyName,type,string.Empty,false,true);

	}
	void WriteTypeProperty(string propertyName,IEdmCollectionType navPropType)
	{
		string type;
		string allocateType;
		string collectinoType;
		if (navPropType.IsAtomic)
		{
			if (navPropType.ElementType.Definition.TypeKind == EdmTypeKind.Primitive)
            {
    				
				IEdmPrimitiveType primitiveType = navPropType.ElementType.Definition as IEdmPrimitiveType;
                collectinoType=TranslateEdmType(primitiveType.PrimitiveKind);
			}
			else
			{
				collectinoType=GetNameFromFullName(navPropType.ElementType.FullName());
			}
			type = 	string.Format("global::System.Collections.ObjectModel.ObservableCollection<{0}>",collectinoType);
			allocateType=string.Format("global::System.Collections.ObjectModel.ObservableCollection<{0}>()",collectinoType);
			WriteTypeProperty(propertyName,type,false,false);
			WriteTypePropertyFields(propertyName,type,allocateType,false,true);

		}
		else
			
		{
			type = 	string.Format("global::System.Data.Services.Client.DataServiceCollection<{0}>",GetNameFromFullName(navPropType.ElementType.FullName()));
			allocateType=string.Format("global::System.Data.Services.Client.DataServiceCollection<{0}>(null, global::System.Data.Services.Client.TrackingMode.None)",GetNameFromFullName(navPropType.ElementType.FullName()));
			WriteTypeProperty(propertyName,type,false,true);
			WriteTypePropertyFields(propertyName,type,allocateType,false,false);	
		}
	}
	void WriteTypeProperty(string propertyName, IEdmComplexType ctxType)
	{
		//IEdmComplexType ctxType = (IEdmComplexType) property.Type.Definition;
        string type=ctxType.Name;
		WriteDataMemberAttribute();
		WriteTypeProperty(propertyName,type,true,false);
		WriteTypePropertyFields(propertyName,type,string.Empty,true,true);
		WriteComplexMemberStorageFields(propertyName, ctxType);

	}
	void WriteDataMemberAttribute()
	{
#>
	    [global::System.Runtime.Serialization.DataMemberAttribute()]
<#+
	}

	void WriteComplexMemberStorageFields(string propertyName, IEdmComplexType ctxType)
	{
		foreach (IEdmProperty property in ctxType.DeclaredProperties)
		{
			var propertyType = property.Type.Definition as IEdmPrimitiveType;
		#>
		[global::System.Data.Linq.Mapping.ColumnAttribute<#= property.Type.IsNullable ? "" : "(CanBeNull=false)"#>]
		private global::System.<#= propertyType.Name #><#= property.Type.IsNullable && propertyType.Name != "String" ? "?" : ""  #> <#= propertyName #>_<#= property.Name #>
		{
			get { return this.<#= propertyName #>.<#= property.Name #>; }
			set { this.<#= propertyName #>.<#= property.Name #> = value; }			
		}
<#+
		}

	}
	void WriteTypePropertyFields(string propertyName, string type, string defaultTypeAllocation, bool createIntilizationfield, bool createOnPropertyChangeMethods)
	{
		if (!String.IsNullOrEmpty(defaultTypeAllocation))
		{
#>
		private  <#=type#> _<#=propertyName#> = new <#=defaultTypeAllocation#>;
<#+		}
		else
		{
#>
		private  <#=type#> _<#=propertyName#>;
<#+
		}
		if (createIntilizationfield)
		{
#>
		private bool _<#=propertyName#>Initialized;
<#+
		}
		
		if (createOnPropertyChangeMethods)
		{
#>
        partial void On<#=propertyName #>Changing(<#=type#> value);
        partial void On<#=propertyName#>Changed();
<#+			
		}
		this.WriteLine(string.Empty);
	}

	void WritePropertyStorageAttribute(string propertyName, bool isNullable, bool isPrimaryKey)
	{
#>
		[global::System.Data.Linq.Mapping.ColumnAttribute(<#= isNullable ? "CanBeNull=true" : "CanBeNull=false"#><#= isPrimaryKey ? ", IsPrimaryKey=true" : "" #>)]
<#+
	}

	void WriteTypeProperty(string propertyName, string typeName, bool initalizeType, bool isEntityReference)
	{
		StringBuilder initilizeType = new StringBuilder(string.Empty);
		
#>
	    public <#=typeName#> <#=propertyName#>
        {
            get
            {
<#+
				if (initalizeType)
				{
		#>
                if (((this._<#=propertyName#> == null) 
                            && (this._<#=propertyName#>Initialized != true)))
                {
                    this._<#=propertyName#> = new <#=typeName#>();
                    this._<#=propertyName #>Initialized = true;
                }
<#+
				}
		#>
                return this._<#=propertyName#>;
            }
            set
            {
<#+ 			if (!isEntityReference)
				{
#>				this.On<#=propertyName#>Changing(value);
<#+
				}
#>				this._<#=propertyName#> = value;
<#+				if (initalizeType)
				{
#>				this._<#=propertyName#>Initialized = true;
<#+				}
				if (!isEntityReference)
				{
#>				this.On<#=propertyName#>Changed();
<#+				}
#>
				this.OnPropertyChanged("<#=propertyName#>");
            }
        }		 	
<#+	
	
	}
	void WriteComplexTypes()
	{
		
		 var ctxTypes= from item in TransformContext.EdmModel.SchemaElements
                             where item.SchemaElementKind== EdmSchemaElementKind.TypeDefinition && item is IEdmComplexType
                             select item as IEdmSchemaElement;
		 foreach (IEdmSchemaElement element in ctxTypes)
        {
        	IEdmComplexType complexTypeDefinition = element as IEdmComplexType;
            WriteTypeDeclaration(complexTypeDefinition);
			BeginWriteType(complexTypeDefinition);
			WriteTypeStaticCreateMethod(complexTypeDefinition);
			WriteTypeProperties(complexTypeDefinition);
			EndWriteType(complexTypeDefinition);
			
        }

	}

	void WriteTypeStaticCreateMethod(IEdmComplexType complexType )
	{

		IEdmComplexType complexTypeToProcess=complexType;
		List<IEdmProperty> nonNullableProps = new List<IEdmProperty>();
		
		do{
			nonNullableProps.AddRange(GetNonNullableProperties(complexTypeToProcess.DeclaredProperties));
			complexTypeToProcess= (IEdmComplexType)complexTypeToProcess.BaseType;
		
		}while (complexTypeToProcess!=null);
			
		int propertyCount = nonNullableProps.Count();
		if (propertyCount==0)
		{
			return;	
		}
		WriteTypeStaticCreateMethod (complexType.Name, nonNullableProps);
	}
	
	
	void WriteTypeStaticCreateMethod(string typeName, IEnumerable<IEdmProperty> prameters)
	{
#>
		public  static  <#=typeName#> Create<#=typeName#>(<#=ConstructMethodParameterList(prameters)#>)
		{
			<#=typeName#> <#=typeName.ToLower()#> = new <#=typeName#>();
<#+		
		foreach (IEdmProperty property in prameters)
		{
#>			<#=typeName.ToLower()#>.<#=property.Name#> = <#=LowerCaseFirstCharecter(property.Name)#>;
<#+	
		}
#>
			return <#=typeName.ToLower()#>;
		}
		
<#+
		
	}
	string ConstructMethodParameterList(IEnumerable<IEdmProperty> properties)
	{
		StringBuilder sb = new StringBuilder();
		int propertyCount = properties.Count();
		if (propertyCount==0)
		{
			return sb.ToString();	
		}
		foreach (IEdmProperty property in properties)
		{
			string type=string.Empty;
			string parameterName =string.Empty;
			
		 	if (property.Type.Definition.TypeKind == EdmTypeKind.Primitive)
            {
                           
                IEdmPrimitiveTypeReference primitive = property.Type as IEdmPrimitiveTypeReference;
                IEdmPrimitiveType primitiveType = primitive.PrimitiveDefinition();
			
				type=TranslateEdmType(primitiveType.PrimitiveKind);
				
			}
			else if (property.Type.Definition.TypeKind == EdmTypeKind.Complex)
			{
				
			 	IEdmComplexType ctxType =  property.Type.Definition as IEdmComplexType;
				type=GetNameFromFullName(ctxType.FullName());
				
			}
			else if (property.Type.Definition.TypeKind == EdmTypeKind.Collection)
			{
				IEdmCollectionType collectionType =  property.Type.Definition as IEdmCollectionType;
			
				if (collectionType.IsAtomic)
				{
					if (collectionType.ElementType.Definition.TypeKind == EdmTypeKind.Primitive)
	            	{
	    				
						IEdmPrimitiveType primitiveType = collectionType.ElementType.Definition as IEdmPrimitiveType;
	                	type=TranslateEdmType(primitiveType.PrimitiveKind);
					}
					else
					{
						type=GetNameFromFullName(collectionType.ElementType.FullName());
					}	
					
					type = string.Format("global::System.Collections.ObjectModel.ObservableCollection<{0}>",type);
				}
			
			}
			
			 parameterName =  LowerCaseFirstCharecter(property.Name);
				string seperator=string.Empty;
				--propertyCount;
				if (propertyCount!=0)
				{
						seperator=", ";
				}				
			sb.AppendFormat("{0} {1} {2}", type,parameterName,seperator);			
		}
		sb.Remove(sb.Length-1,1);
		return sb.ToString();
			
	}
	IEnumerable<IEdmProperty> GetNonNullableProperties(IEnumerable<IEdmProperty> declaredProperties)
	{
		
			var nonNullableProps = from item in declaredProperties
                                    where (item.Type.IsNullable == false && 
												 item.Type.Definition.TypeKind== EdmTypeKind.Primitive ||
												item.Type.Definition.TypeKind== EdmTypeKind.Complex     )||
												((item.Type.Definition.TypeKind== EdmTypeKind.Collection) && (((IEdmCollectionType)item.Type.Definition).IsAtomic))
												
												  
                                    select item as IEdmProperty;
		return  new List<IEdmProperty>(nonNullableProps);

	}	
		
	void WriteTypeDeclaration(IEdmComplexType ctxType)
	{
		// inheritence in complex types is not supported in WCF Data Services
		
#>	public partial class <#=ctxType.Name #>: global::System.ComponentModel.INotifyPropertyChanged
<#+	
	}

	

	void WriteTypeProperty(string propertyName, IEdmEntityType entityType)
	{
		//IEdmEntityTypeReference ctxRefType = property.Type as IEdmEntityTypeReference;
       // IEdmEntityType ctxType = ctxRefType.EntityDefinition();				
        string type=entityType.Name;
		WriteTypeProperty(propertyName,type,false,true);
		WriteTypePropertyFields(propertyName,type,string.Empty,false,false);
	}


void WriteRefrencedEntities(Dictionary<string,IEdmEntityType> processed)
{
	
    var allModelEntiies = from item in TransformContext.EdmModel.SchemaElements
                   where item.SchemaElementKind == EdmSchemaElementKind.TypeDefinition && item is IEdmEntityType
                   select item as IEdmSchemaElement;
	
	foreach (IEdmEntityType entityType in allModelEntiies)
	{
		IEdmEntityType val;
		if (!processed.TryGetValue(entityType.Name,out val))
		{
			WriteEntity(entityType);			
		}
	}
}	
	void WriteINotifyPropertyChangedImplementation()
	{
#>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;        
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
	
<#+
	}

	void WriteServiceOperations(IEdmEntityContainer container )
{
 var svcOps = from item in container.Elements
                                     where item.ContainerElementKind == EdmContainerElementKind.FunctionImport
                                     select item as IEdmFunctionImport;	
	foreach (IEdmFunctionImport svcOp in svcOps)
    {
					
		string parameters=String.Empty;
		string queryOptions=String.Empty;
		string returnType="System.Data.Services.Client.OperationResponse";
		
		if (svcOp.ReturnType==null)
		{
#>															
	 	public <#=returnType#>  <#=svcOp.Name#>()
		{ 	
			return this.Execute(new global::System.Uri("<#=svcOp.Name#>",global::System.UriKind.Relative));
		}	
<#+     
		}
		else
		{
			if (svcOp.ReturnType.Definition.TypeKind == EdmTypeKind.Collection)
	        {
				
				GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
	            IEdmCollectionType collectionType = svcOp.ReturnType.Definition as IEdmCollectionType;
				if (collectionType.ElementType.Definition.TypeKind == EdmTypeKind.Primitive)
				{
					IEdmPrimitiveType primitiveType=collectionType.ElementType.Definition as IEdmPrimitiveType;
					returnType= TranslateEdmType(primitiveType.PrimitiveKind);
					string svcOpUri=string.Format("{0}?{1}",svcOp.Name,queryOptions);
					if (!string.IsNullOrEmpty(queryOptions))
					{
						svcOpUri=string.Format("{0}?{1}",svcOp.Name,queryOptions);	
					}
					else
					{
						svcOpUri=svcOp.Name;
					}

#>		public  System.Collections.Generic.IEnumerable< <#=returnType#>>  <#=svcOp.Name#>(<#=parameters#>)
		{ 
			return (System.Collections.Generic.IEnumerable< <#=returnType#>> )this.Execute< <#=returnType#>> (new global::System.Uri("<#= svcOpUri#>",global::System.UriKind.Relative));
		}
<#+      
				}
				else if (collectionType.ElementType.Definition.TypeKind == EdmTypeKind.Complex)
				{
					GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
	            	returnType=GetNameFromFullName(collectionType.ElementType.FullName());
					string svcOpUri=string.Format("{0}?{1}",svcOp.Name,queryOptions);
					if (!string.IsNullOrEmpty(queryOptions))
					{
						svcOpUri=string.Format("{0}?{1}",svcOp.Name,queryOptions);	
					}
					else
					{
						svcOpUri=svcOp.Name;
					}
#>		public  System.Collections.Generic.IEnumerable< <#=returnType#>>  <#=svcOp.Name#>(<#=parameters#>)
		{ 
			return (System.Collections.Generic.IEnumerable< <#=returnType#>> )this.Execute< <#=returnType#>> (new global::System.Uri("<#= svcOpUri#>",global::System.UriKind.Relative));
		}
<#+      
				}
				else
				{
					GetServiceOperationParameters(svcOp,false,out parameters,out queryOptions);
	            	returnType=GetNameFromFullName(collectionType.ElementType.FullName());
#>		public global::System.Data.Services.Client.DataServiceQuery< <#=returnType#> > <#=svcOp.Name#>(<#=parameters#>)
		{ 
	 		return this.CreateQuery< <#=returnType#> >("<#=svcOp.Name#>")<#=queryOptions#>;
		}
		
<#+     
					
				}
				continue;
			}
			else if (svcOp.ReturnType.Definition.TypeKind == EdmTypeKind.Primitive)
			{
				GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
				IEdmPrimitiveType primitiveType=svcOp.ReturnType.Definition as IEdmPrimitiveType;
				returnType= TranslateEdmType(primitiveType.PrimitiveKind);
			}
			else if (svcOp.ReturnType.Definition.TypeKind == EdmTypeKind.Complex)
			{
				GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
				IEdmComplexType complexType=svcOp.ReturnType.Definition as IEdmComplexType;
				returnType=GetNameFromFullName(complexType.FullName());				
			}
			else if (svcOp.ReturnType.Definition.TypeKind == EdmTypeKind.Entity)
			{
				GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
				IEdmEntityType entityType=svcOp.ReturnType.Definition as IEdmEntityType;
				returnType=GetNameFromFullName(entityType.FullName());				
				
			}
			string uriParameter;
			if (!string.IsNullOrEmpty(queryOptions))
			{
				uriParameter=string.Format("{0}?{1}",svcOp.Name,queryOptions);	
			}
			else
			{
				uriParameter=svcOp.Name;
			}
#>		public  <#=returnType#>  <#=svcOp.Name#>(<#=parameters#>)
		{
			System.Data.Services.Client.QueryOperationResponse< <#=returnType#>> response =this.Execute< <#=returnType#> >(new global::System.Uri("<#= uriParameter#>",global::System.UriKind.Relative));
			System.Collections.IEnumerator enumerator= response.GetEnumerator();
			enumerator.MoveNext();
			return (<#=returnType#>)enumerator.Current;
		}
<#+      
			
			
		}
    			
							
	}
}

void GetServiceOperationParameters(IEdmFunctionImport svcOp, bool useExecute, out string svcOpParameters,out string svcOpQueryOptions)
{
	int paramCount = svcOp.Parameters.Count();
	string parameters=String.Empty;
	string queryOptions=String.Empty;	
    foreach (IEdmFunctionParameter p in svcOp.Parameters)
    {
		parameters=string.Concat(parameters,GetNameFromFullName(p.Type.FullName()).ToLower());
		parameters=string.Concat(parameters," ");
		parameters=string.Concat(parameters,p.Name);
		if (useExecute)
		{
			queryOptions=string.Concat(queryOptions,string.Format("{0} ='\"+{0}+\"'", p.Name));
		}
		else
		{
			queryOptions=string.Concat(queryOptions,string.Format(".AddQueryOption(\"{0}\" ,\"'\"+{0}+\"'\")", p.Name));
		}
					
    	--paramCount;
		if (paramCount!=0)
		{
			parameters= string.Concat(parameters,", ");
			if (useExecute)
			{
				queryOptions=string.Concat(queryOptions,"&");
			}
		}				                       

    }
	svcOpParameters=parameters;
	svcOpQueryOptions=queryOptions;
	
					
}

void WriteEntityPropertyMappings(IEdmEntityType entityType)
{

    foreach (IEdmProperty entityProperty in entityType.DeclaredProperties)
    {
        WriteEntityPropertyMapping(entityProperty);       
    }
}
void WriteEntityPropertyMapping(IEdmProperty property)
{
    
    string targetPath, sourcePath, keepInContent, contentKind, nsPrefix, nsUri;
    targetPath=sourcePath=keepInContent=contentKind=nsPrefix=nsUri= string.Empty;
	keepInContent="true";
    foreach (IEdmAnnotation annotation in property.ImmediateAnnotations)            
    {                

        if (annotation.LocalName() == "FC_TargetPath")
        {
           targetPath= GetAnnotationStringValue(annotation);
        }
        else if (annotation.LocalName() == "FC_SourcePath")
        {
            sourcePath = GetAnnotationStringValue(annotation);
        }
        else if (annotation.LocalName() == "FC_KeepInContent")
        {
            keepInContent = GetAnnotationStringValue(annotation).ToLower();
        }
        else if (annotation.LocalName() == "FC_ContentKind")
        {
            contentKind = GetAnnotationStringValue(annotation);
        }
        else if (annotation.LocalName() == "FC_NsPrefix")
        {
            nsPrefix= GetAnnotationStringValue(annotation);
        }
        else if (annotation.LocalName() == "FC_NsUri")
        {
            nsUri= GetAnnotationStringValue(annotation);
        }

    }
    if (string.IsNullOrEmpty(targetPath))
    {
        return;
    }            
    if (!string.IsNullOrEmpty(nsUri))
    {		
#>	[global::System.Data.Services.Common.EntityPropertyMappingAttribute("<#=sourcePath#>", "<#=targetPath#>", "<#=nsPrefix#>", "<#=nsUri#>", "<#=keepInContent#>")]		
<#+  		
    }
    else
    {
        if (string.IsNullOrEmpty(sourcePath))
        {
            sourcePath = property.Name;                    
        }
#>	[global::System.Data.Services.Common.EntityPropertyMappingAttribute("<#=sourcePath#>", global::System.Data.Services.Common.SyndicationItemProperty.<#=GetSyndicationItemProperty(targetPath)#>, <#=GetSyndicationTextContentKind(contentKind)#>, <#=keepInContent#>)]		
<#+  		

    }

}
string GetAnnotationStringValue(IEdmAnnotation annotation)
{
    IEdmImmediateValueAnnotation e = annotation as IEdmImmediateValueAnnotation;
    Microsoft.Data.Edm.Library.Values.EdmStringConstant stringConstant = (Microsoft.Data.Edm.Library.Values.EdmStringConstant)e.Value;
    return stringConstant.Value;

}
string GetSyndicationItemProperty(string value)
{
    string stringToRemove="Syndication";

   
    return ((SyndicationItemProperty)Enum.Parse(typeof(SyndicationItemProperty),  value.Remove(0, stringToRemove.Length))).ToString();
    
}
string  GetSyndicationTextContentKind(string value)
{
    switch (value.ToLower())
    {
        case "text":return "global::System.Data.Services.Common.SyndicationTextContentKind.Plaintext";
            
        case "xhtml": return "global::System.Data.Services.Common.SyndicationTextContentKind.Xhtml";
            
        case "html": return "global::System.Data.Services.Common.SyndicationTextContentKind.Html";
            
        default:
            return "global::System.Data.Services.Common.SyndicationTextContentKind.Plaintext";
    }
    
}
		
string LowerCaseFirstCharecter(string text)
	{
		char[] tmpBuffer = text.ToCharArray();	
		tmpBuffer[0]=text[0].ToString().ToLowerInvariant().ToCharArray()[0];
		return new String(tmpBuffer);
	}
	string TranslateEdmType(EdmPrimitiveTypeKind kind)
	{
		string type="UNKNOWN";
		if (kind==EdmPrimitiveTypeKind.Int32)
		{
			type= "int";
		}
		else if (kind== EdmPrimitiveTypeKind.String)
		{
			type= "string";	
		}
		else if (kind==EdmPrimitiveTypeKind.Binary)
		{
			type= "byte[]";
		}
		else if (kind==EdmPrimitiveTypeKind.Decimal)
		{
			type= "decimal";
		}
		else if (kind==EdmPrimitiveTypeKind.Int16)
		{
			type= "short";	
		}
		else if(kind==EdmPrimitiveTypeKind.Single)
		{	
			type= "float";
		}
		else if (kind==EdmPrimitiveTypeKind.Boolean)
		{
			type= "bool";	
		}
		else if (kind== EdmPrimitiveTypeKind.DateTime)
		{
			type= "global::System.DateTime";
		}
		else if (kind== EdmPrimitiveTypeKind.Double)
		{
			type= "double";
		}
		else if (kind== EdmPrimitiveTypeKind.Guid)
		{
			type= "global::System.Guid";
		}
		else if (kind== EdmPrimitiveTypeKind.Byte)
		{
			type="byte";
		}
		else if (kind== EdmPrimitiveTypeKind.Int64)
		{
			type="long";
		}
		else if (kind== EdmPrimitiveTypeKind.SByte)
		{
			type="sbyte";
		}
		else if (kind == EdmPrimitiveTypeKind.Stream)
		{
			type="global::System.Data.Services.Client.DataServiceStreamLink";
		}
		
		
		return type;
	}
	
	string GetNameFromFullName(string fullname)
	{			
		string[] fullNameParts=fullname.Split('.');
		 
		return fullNameParts[fullNameParts.Length-1];
	}

	
	public CodeGenerationContext TransformContext{get;set;}	
	
	public class CodeGenerationContext
	{
		public string Namespace{get;set;}
		public string MetadataFilepath{get;set;}
		public string MaxProtocolVersion{get;set;}
		public IEdmModel EdmModel {get;set;}
		public CodeGenerationContext()
		{
		}
		public void LoadEdmModelFromString(string edmxContent)
			{
				IEdmModel model;
				IEnumerable<Microsoft.Data.Edm.Validation.EdmError> errors;
				 using (StringReader stringReader = new StringReader(edmxContent))
				{
					using (XmlReader xmlReader = XmlReader.Create(stringReader))
					{
						bool parsed = EdmxReader.TryParse(xmlReader, out model, out errors);
						if (!parsed)
						{
							throw new Exception(errors.FirstOrDefault().ErrorMessage);	
						}

						EdmModel=model;
					}
				}
            	// EDM lib has a bug in October CTP for reading the DataServiceVersion
				XmlDocument doc = new XmlDocument();
				doc.LoadXml(edmxContent);                        
	            foreach (XmlAttribute attribute in doc.DocumentElement.ChildNodes[0].Attributes)
	            {
	           		if (attribute.LocalName=="MaxDataServiceVersion")
	                {
						this.MaxProtocolVersion=string.Format("global::System.Data.Services.Common.DataServiceProtocolVersion.V",attribute.Value[0]);                    
	                }
	            }
			}
		public void LoadEdmModelFromFile()
		{
			IEdmModel model;
			IEnumerable<Microsoft.Data.Edm.Validation.EdmError> errors;
			
            FileStream fs = new FileStream(MetadataFilepath, FileMode.Open, FileAccess.Read);
            XmlReader reader = XmlReader.Create(fs, new XmlReaderSettings() { ValidationFlags = System.Xml.Schema.XmlSchemaValidationFlags.None, ValidationType = System.Xml.ValidationType.None });
            
            bool parsed = EdmxReader.TryParse(reader, out model, out errors);
			if (!parsed)
			{
				throw new Exception(errors.FirstOrDefault().ErrorMessage);	
			}
			EdmModel=model;
			// EDM lib has a bug in October CTP for reading the DataServiceVersion
			XmlDocument doc = new XmlDocument();
			doc.Load(MetadataFilepath);                 
            foreach (XmlAttribute attribute in doc.DocumentElement.ChildNodes[0].Attributes)
            {
           		if (attribute.LocalName=="MaxDataServiceVersion")
                {
					this.MaxProtocolVersion=string.Format("global::System.Data.Services.Common.DataServiceProtocolVersion.V{0}",attribute.Value[0]);                    
                }
            }

		}
	}
	
#>
